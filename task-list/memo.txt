0. Environment setting: in .env:
    DB_CONNECTION=mysql
    DB_HOST=127.0.0.1
    DB_PORT=3306
    DB_DATABASE=
    DB_USERNAME=
    DB_PASSWORD=
1. Route: in routes/web.php:
    i. Available Router Methods:
        Route::get($uri, $callback);
        Route::post($uri, $callback);
        Route::put($uri, $callback);
        Route::delete($uri, $callback);
        [Not used yet]Route::patch($uri, $callback);
        [Not used yet]Route::options($uri, $callback);

    ii. php artisan route:list
        GET|HEAD  tasks ........................................ tasks.index  
        POST      tasks ........................................ tasks.store  
        GET|HEAD  tasks/create ................................ tasks.create  
        PUT       tasks/{task} ................................ tasks.update  
        DELETE    tasks/{task} ............................... tasks.destroy  
        GET|HEAD  tasks/{task}/edit ............................. tasks.edit  
        GET|HEAD  tasks/{task}/show ............................. tasks.show  
        PUT       tasks/{task}/toggle-complete ....... tasks.toggle-complete  

    iii. Named Routes
        Named routes allow the convenient generation of URLs or redirects for 
        specific routes. You may specify a name for a route by chaining the 
        name method onto the route definition:
        Eg1.,
        Route::get('/tasks', function () { return view(...); })->name('tasks.index');                                                   ^^^^^^^^^^^^^^^^^^^^
        Eg2.,
        Route::get('/tasks/{task}/edit', function (Task $task) {
            ...        })->name('tasks.edit');
                         ^^^^^^^^^^^^^^^^^^^^
    
    iv. View Routes
        If your route only needs to return a view, you may use the Route::view 
        method. Like the redirect method, this method provides a simple shortcut
         so that you do not have to define a full route or controller. 
        Eg1.,
         Route::view('/tasks/create', 'create')->name('tasks.create');
                ^^^^
        Eg2.,
         Route::get('/', function () { return redirect()->route('tasks.index'); });
                                              ^^^^^^^^^^
        (Better way?)==>
        (Route::redirect('/', 'tasks.index');)

    v. Form Method Spoofing (HTML表單的HTTP方法欺騙)
        HTML forms do not support PUT, PATCH, or DELETE actions. 
        So, when defining PUT, PATCH, or DELETE routes that are 
        called from an HTML form, you will need to add a hidden 
        _method field to the form. 
        標準:
        <form action="/example" method="POST">
            <input type="hidden" name="_method" value="PUT">
            <input type="hidden" name="_token" value="{{ csrf_token() }}">
        </form>
        簡化:
        <form action="/example" method="POST">
            @method('PUT')
            @csrf
        </form>


2. Eloquent ORM (Object-Relational Mapper)
    Laravel includes Eloquent, an object-relational mapper (ORM) 
    that makes it enjoyable to interact with your database. 
    When using Eloquent, each database table has a corresponding
     "Model" that is used to interact with that table. 
    In addition to retrieving records from the database table, 
    Eloquent models allow you to insert, update, and delete records
     from the table as well.
    Eloquent ORM 是 Laravel 框架的官方物件關聯映射(ORM)系統，它提供了一個
    簡單的 ActiveRecord 實現，可以用面向對象的方式操作數據庫(資料庫抽象層)。
    使用 Eloquent 可以透過模型對象來處理數據庫操作，並且可以輕鬆地定義和管理
    數據表之間的關係。(提供單一介面，與多種資料庫互動: sqlite/mysql/mariadb/pgsql)
    ActiveRecord的意思是一個Eloquent類別不但負責提供與整個資料表互動的能力
    (如User::all()來取得所有用戶)，也可以代表一個單獨的資料列(如$sharon = new User)
    每一個實例都可以管理自己的持久保存，如$sharon->save() 或 $sharon->delete()

    主要特性：
    簡單的數據庫操作：無需直接寫 SQL 語句，用模型方法來進行查詢和操作。
    數據表與模型的對應：每個模型對應一個數據表，模型的屬性和方法代表了表中的列和操作。
    關聯管理：輕鬆定義和管理表之間的關聯（如一對多、多對多等）。
    💡 ORM 是一種技術，它把資料庫中的資料表格和記錄映射成程式中的對象，
    讓你可以像操作物件一樣操作資料庫中的資料，而不需要直接寫 SQL 查詢。

    Eloquent目標在於簡化，"約定優於配置"
    2-1 Model: in app/Models/Task.php
 
    class Task extends Model{
	    use HasFactory;
	    protected $fillable = ['title', 'description', 'long_description'];
	    public function toggleComplete()    {
        	$this->completed = !$this->completed;
	        $this->save();
	    }
	}

    i. php artisan make:model Task -m
       Create app/Models/Task.php & 
       (-m: database/migrations/[data]_create_tasks_table.php )
       Task.php ==> create_tasks_table.php
        ^^^^  single -> plural^^

    ii. Retrieving Models 
    隱性路由綁定：幫路由參數取一個獨一無二的model名稱，如Task而非id
    Route::get('/tasks', function () {
        return view('index', ['tasks' => Task::latest()/Task::all()   ]);
    });

    Route::get('/tasks/{task}/edit', function (Task $task) {
        return view('edit', [
        'task' => $task
        ]);    
    })->name('tasks.edit');

3. Blade Template 模板:
    i. Blade echo:
        {{ }}等同echo，{{ $var }}等同<?= $var ?>，嚴格來說相當於<?= htmlentities($var) ?>
        想要echo未轉義的資料，可用{!! !!}。@{{ handleVar }}會echo {{ handleVar }}。
    ii. condition
        @if (condition 1)
            ....
        @elseif (condition 2)
            ....
        @else
            ....
        @endif
    iii. @forelse (被迭代的物件(如$task)為空時，有後備機制的@foreach)
        @forelse ($tasks as $task)
            <div>
                <a href="{{ route('tasks.show', ['task' => $task->id]) }}"
                @class(['line-through' => $task->completed ]) > {{ $task->title }}</a>
            </div>
        @empty
            <div>There are no tasks!</div>
        @endforelse

    iv. @for/@endfor，@foreach/@endforeach，@while/@endwhile
    v. 模板繼承
        以create.blade.php/edit.blade.php為例：

        @extends('layouts.app'): 以resources/views/layouts/app.blade.php擴展，
        @yield('styles'), @yield('title'), @yield('content')

        @section('content')
            @include('form')
        @endsection

        @yield('content')會被 @section('content')/@endsection置換，即@include('form')
        引入 form.blade.php，調用$task->title/description/long_description(資料庫)
        